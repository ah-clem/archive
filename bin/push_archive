#!/bin/bash

archive_push_version="0.3.0"

# Created by argbash-init v2.10.0
# ARG_POSITIONAL_INF([locs],[bucket src ..],[2])
# ARG_HELP([push sources to the aws bucket, using paths in archive staging area to determine aws object names])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_locs=('' '' )
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "push sources to the aws bucket, using paths in archive staging area to determine aws object names"
	printf 'Usage: %s [-h|--help] <locs-1> <locs-2> [<locs-3>] ... [<locs-n>] ...\n' "$0"
	printf '\t%s\n' "<locs>: bucket src .."
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'locs' (2 times)"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_locs[0] _arg_locs[1] "
	_our_args=$((${#_positionals[@]} - 2))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_locs[$((ii + 2))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv

# example (with archive structure already set up in staging directory):
#	$ cd staging_dir
#	$ push_archive <bucket> *archive *manifest
# or, more concretely:
#	$ cd /Volumes/archives/muir/users/robert/Pictures
#	$ push_archive archives-remulac-fr Pictures_2022-05-07_archive Pictures_2022-05-07_manifest
#
# N.B. The stored object goes in the named bucket with the prefix
#      derived from the path following "archives/"  That is, we assume
#      that the staging area has a file structure (under "archives") that
#      is used to generate the prefix of the pushed object
#
# The script can be run from anywhere: the path(s) to the local files
# are used to find the "archives" file structure.

# sf -- shift off the first argument and return the rest

function sf {
    shift
    echo "$@"
}

set -e

bucket="${_arg_locs[0]}"
sources=( $(sf ${_arg_locs[@]}) )

for i in "${sources[@]}"
do
    src_name="${i##.*/}"			# base name
    rel_srcdir="${i%${src_name}}"		# src is in this directory
    : ${rel_srcdir:=.}				# if no leading dir to src, directory is "."
    pushd "${rel_srcdir}" > /dev/null
    abs_srcdir="$(pwd)"				# capture absolute dir containing src
    prefix="${abs_srcdir##*archives/}"		# from absolute dir, extract aws "prefix"
    popd > /dev/null
    aws s3 cp "$i" "s3://${bucket}/${prefix}/${src_name}" --sse --storage-class DEEP_ARCHIVE
done

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
