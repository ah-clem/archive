#!/bin/bash

archive_build_version="0.3.0"

# Created by argbash-init v2.10.0
# ARG_POSITIONAL_INF([dirs],[destdir srcdir ..],[1])
# ARG_OPTIONAL_SINGLE([dirfile],[d],[file containing source directories, one per line])
# ARG_HELP([generate archive in destdir from list of srcdirs found under home directory])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='dh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_dirs=('' )
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_dirfile=


print_help()
{
	printf '%s\n' "generate archive in destdir from list of srcdirs found under home directory"
	printf 'Usage: %s [-d|--dirfile <arg>] [-h|--help] <dirs-1> [<dirs-2>] ... [<dirs-n>] ...\n' "$0"
	printf '\t%s\n' "<dirs>: destdir srcdir .."
	printf '\t%s\n' "-d, --dirfile: file containing source directories, one per line (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--dirfile)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_dirfile="$2"
				shift
				;;
			--dirfile=*)
				_arg_dirfile="${_key##--dirfile=}"
				;;
			-d*)
				_arg_dirfile="${_key##-d}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'dirs'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_dirs "
	_our_args=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_dirs[$((ii + 1))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv

# example (with archive structure already set up in staging directory):
#	$ cd <dest_dir>
#	$ build_archive . -d dirs
# or, more concretely:
#	$ cd /Volumes/archives/muir/users/robert/Pictures
#	$ build_archive . -d dirs
#	$ build_archive . Pictures	# use command line arg(s) instead of dirfile

# sf -- shift off the first argument and use as reference
#	then shift off the destdir leaving only the list of srcdirs
#	return the remainder as an array assigned via reference

set -e

function sf {
    local ref="$1"
    shift		# toss the "ref" arg
    shift		# toss the "destdir" arg
    eval "$ref"'=( "$@" )'
}

destdir="${_arg_dirs[0]}"

# get list of source names from command line, if any

sf srcdirs "${_arg_dirs[@]}"

# add to list of source names from file, if given

if [ -n "$_arg_dirfile" ]
then
    [ -f "$_arg_dirfile" -a -r "$_arg_dirfile" ] || die "Could not find/read the dirfile: \"$_arg_dirfile\""
    while read
    do
	srcdirs=( "${srcdirs[@]}" "$REPLY" )
    done < "$_arg_dirfile"
fi

cd "$destdir"

destdir="$(pwd)"	# get absolute pathname
dname=${destdir##*/}
basename="${dname}_$(date '+%F')"
archname="${basename}_archive"
manifname="${basename}_manifest"

cd "$HOME"

generate_archive -o "${destdir}/$archname" -m "${destdir}/$manifname" "${srcdirs[@]}"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
